type token =
  | VAR of (string)
  | INT of (int)
  | PLUS
  | MINUS
  | ASTERISK
  | SLASH
  | EQUAL
  | AND
  | OR
  | NOTEQ
  | LESS
  | GREATER
  | COLCOL
  | LPAREN
  | RPAREN
  | LBRA
  | RBRA
  | ARROW
  | VBAR
  | SEMICOL
  | TRUE
  | FALSE
  | FUN
  | LET
  | REC
  | IN
  | IF
  | THEN
  | ELSE
  | MATCH
  | WITH
  | HEAD
  | TAIL
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Syntax
# 42 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* ASTERISK *);
  262 (* SLASH *);
  263 (* EQUAL *);
  264 (* AND *);
  265 (* OR *);
  266 (* NOTEQ *);
  267 (* LESS *);
  268 (* GREATER *);
  269 (* COLCOL *);
  270 (* LPAREN *);
  271 (* RPAREN *);
  272 (* LBRA *);
  273 (* RBRA *);
  274 (* ARROW *);
  275 (* VBAR *);
  276 (* SEMICOL *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* FUN *);
  280 (* LET *);
  281 (* REC *);
  282 (* IN *);
  283 (* IF *);
  284 (* THEN *);
  285 (* ELSE *);
  286 (* MATCH *);
  287 (* WITH *);
  288 (* HEAD *);
  289 (* TAIL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\005\000\005\000\006\000\006\000\006\000\006\000\006\000\
\006\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\003\000\001\000\001\000\001\000\001\000\
\002\000\003\000\003\000\001\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\004\000\006\000\008\000\006\000\004\000\
\001\000\003\000\005\000\001\000\001\000\001\000\001\000\002\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\033\000\005\000\006\000\000\000\000\000\000\000\
\007\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\012\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\026\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\013\000\011\000\000\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\036\000\037\000\000\000\038\000\
\039\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\017\000\023\000\024\000\019\000\074\000\075\000"

let yysindex = "\003\000\
\172\255\000\000\000\000\000\000\000\000\172\255\172\255\133\255\
\000\000\000\000\016\255\255\254\172\255\172\255\137\255\137\255\
\000\000\162\001\000\000\004\255\037\002\000\000\059\002\002\255\
\003\255\021\255\022\255\213\001\215\255\000\000\000\000\172\255\
\172\255\172\255\172\255\172\255\172\255\172\255\172\255\172\255\
\172\255\172\255\000\000\000\000\000\000\172\255\000\000\172\255\
\172\255\028\255\172\255\065\255\121\002\121\002\004\255\004\255\
\103\002\081\002\081\002\081\002\103\002\103\002\103\002\000\000\
\081\002\241\001\024\255\184\001\000\000\000\000\015\255\000\000\
\000\000\014\255\245\254\172\255\172\255\172\255\000\000\065\255\
\065\255\172\255\081\002\011\002\081\002\009\255\032\255\081\002\
\172\255\172\255\081\002\081\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\000\000\029\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\255\000\000\000\000\
\000\000\000\000\000\000\000\000\117\000\146\000\059\000\088\000\
\169\000\253\000\019\001\038\001\192\000\215\000\238\000\000\000\
\053\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\001\000\000\083\001\000\000\031\255\098\001\
\000\000\000\000\113\001\131\001"

let yygindex = "\000\000\
\000\000\002\000\006\000\040\000\000\000\186\255"

let yytablesize = 911
let yytable = "\026\000\
\032\000\081\000\018\000\001\000\004\000\005\000\082\000\020\000\
\021\000\086\000\087\000\037\000\038\000\039\000\028\000\029\000\
\025\000\007\000\047\000\008\000\048\000\081\000\050\000\027\000\
\009\000\010\000\090\000\049\000\067\000\014\000\077\000\079\000\
\080\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\081\000\002\000\003\000\000\000\
\041\000\065\000\066\000\064\000\068\000\000\000\030\000\031\000\
\000\000\044\000\017\000\044\000\044\000\000\000\044\000\000\000\
\000\000\069\000\070\000\044\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\000\084\000\085\000\
\071\000\000\000\000\000\088\000\000\000\072\000\073\000\018\000\
\000\000\000\000\091\000\092\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\044\000\044\000\000\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\000\000\044\000\044\000\044\000\000\000\000\000\044\000\
\000\000\000\000\044\000\044\000\003\000\004\000\005\000\000\000\
\006\000\004\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\007\000\000\000\008\000\022\000\007\000\000\000\
\008\000\009\000\010\000\011\000\012\000\009\000\010\000\013\000\
\000\000\000\000\014\000\000\000\015\000\016\000\000\000\000\000\
\019\000\000\000\000\000\003\000\004\000\005\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\008\000\000\000\000\000\000\000\023\000\
\009\000\010\000\011\000\012\000\000\000\000\000\013\000\000\000\
\000\000\014\000\000\000\015\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\004\000\
\005\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\007\000\000\000\008\000\000\000\
\000\000\000\000\000\000\009\000\010\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\022\000\000\000\032\000\032\000\032\000\000\000\
\000\000\000\000\032\000\000\000\032\000\032\000\000\000\032\000\
\014\000\014\000\014\000\014\000\014\000\020\000\000\000\000\000\
\014\000\014\000\014\000\000\000\014\000\000\000\014\000\000\000\
\014\000\014\000\000\000\000\000\028\000\000\000\000\000\014\000\
\000\000\014\000\014\000\000\000\014\000\017\000\017\000\017\000\
\017\000\017\000\000\000\029\000\000\000\017\000\017\000\017\000\
\000\000\017\000\000\000\017\000\000\000\017\000\017\000\000\000\
\000\000\000\000\031\000\000\000\017\000\000\000\017\000\017\000\
\000\000\017\000\018\000\018\000\018\000\018\000\018\000\000\000\
\000\000\034\000\018\000\018\000\018\000\000\000\018\000\000\000\
\018\000\000\000\018\000\018\000\000\000\000\000\000\000\000\000\
\030\000\018\000\000\000\018\000\018\000\000\000\018\000\015\000\
\015\000\000\000\000\000\015\000\000\000\000\000\000\000\015\000\
\015\000\015\000\035\000\015\000\000\000\015\000\000\000\015\000\
\015\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
\015\000\015\000\000\000\015\000\016\000\016\000\000\000\000\000\
\016\000\000\000\000\000\000\000\016\000\016\000\016\000\000\000\
\016\000\043\000\016\000\000\000\016\000\016\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\016\000\016\000\019\000\
\016\000\000\000\000\000\019\000\019\000\000\000\000\000\019\000\
\000\000\019\000\000\000\019\000\019\000\000\000\000\000\000\000\
\000\000\000\000\019\000\000\000\019\000\019\000\023\000\019\000\
\000\000\000\000\023\000\023\000\000\000\000\000\023\000\000\000\
\023\000\000\000\023\000\023\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\023\000\023\000\024\000\023\000\000\000\
\000\000\024\000\024\000\000\000\000\000\024\000\000\000\024\000\
\000\000\024\000\024\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\024\000\024\000\025\000\024\000\000\000\000\000\
\025\000\025\000\000\000\000\000\025\000\000\000\025\000\000\000\
\025\000\025\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\025\000\025\000\021\000\025\000\021\000\000\000\021\000\
\021\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\021\000\021\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\022\000\000\000\022\000\022\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\022\000\022\000\
\000\000\022\000\000\000\000\000\020\000\000\000\020\000\000\000\
\020\000\020\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\020\000\020\000\028\000\020\000\028\000\000\000\028\000\
\028\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\028\000\028\000\029\000\028\000\029\000\000\000\029\000\029\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\029\000\
\029\000\031\000\029\000\031\000\000\000\031\000\031\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\031\000\031\000\
\034\000\031\000\034\000\000\000\034\000\034\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\034\000\034\000\030\000\
\034\000\030\000\000\000\030\000\030\000\000\000\000\000\000\000\
\000\000\000\000\030\000\000\000\030\000\030\000\000\000\030\000\
\000\000\035\000\000\000\035\000\000\000\035\000\035\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\035\000\035\000\
\000\000\035\000\004\000\005\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\007\000\
\000\000\008\000\000\000\000\000\000\000\000\000\009\000\010\000\
\004\000\005\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\007\000\000\000\008\000\
\000\000\000\000\000\000\000\000\009\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\004\000\005\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\007\000\000\000\008\000\000\000\000\000\000\000\
\000\000\009\000\010\000\000\000\000\000\000\000\000\000\000\000\
\051\000\004\000\005\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\007\000\000\000\
\008\000\000\000\000\000\000\000\000\000\009\000\010\000\000\000\
\000\000\000\000\076\000\004\000\005\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\007\000\000\000\008\000\000\000\000\000\000\000\000\000\009\000\
\010\000\000\000\000\000\000\000\089\000\004\000\005\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\007\000\045\000\008\000\000\000\000\000\000\000\
\000\000\009\000\010\000\004\000\005\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\007\000\000\000\008\000\000\000\000\000\000\000\046\000\009\000\
\010\000\004\000\005\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\007\000\000\000\
\008\000\000\000\000\000\000\000\000\000\009\000\010\000\004\000\
\005\000\032\000\033\000\034\000\035\000\000\000\037\000\038\000\
\039\000\000\000\000\000\042\000\007\000\000\000\008\000\000\000\
\000\000\004\000\005\000\009\000\010\000\034\000\035\000\000\000\
\037\000\038\000\039\000\000\000\000\000\000\000\007\000\000\000\
\008\000\000\000\000\000\000\000\000\000\009\000\010\000"

let yycheck = "\001\001\
\000\000\013\001\001\000\001\000\001\001\002\001\018\001\006\000\
\007\000\080\000\081\000\008\001\009\001\010\001\013\000\014\000\
\001\001\014\001\017\001\016\001\018\001\013\001\001\001\025\001\
\021\001\022\001\018\001\007\001\001\001\000\000\007\001\017\001\
\019\001\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\013\001\017\001\017\001\255\255\
\018\001\048\000\049\000\046\000\051\000\255\255\015\000\016\000\
\255\255\018\000\000\000\020\000\021\000\255\255\023\000\255\255\
\255\255\001\001\002\001\028\000\029\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\076\000\077\000\078\000\
\016\001\255\255\255\255\082\000\255\255\021\001\022\001\000\000\
\255\255\255\255\089\000\090\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\255\255\
\065\000\066\000\255\255\068\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\083\000\084\000\085\000\255\255\255\255\088\000\
\255\255\255\255\091\000\092\000\000\001\001\001\002\001\255\255\
\004\001\001\001\002\001\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\014\001\255\255\016\001\017\001\014\001\255\255\
\016\001\021\001\022\001\023\001\024\001\021\001\022\001\027\001\
\255\255\255\255\030\001\255\255\032\001\033\001\255\255\255\255\
\000\000\255\255\255\255\000\001\001\001\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\014\001\255\255\016\001\255\255\255\255\255\255\000\000\
\021\001\022\001\023\001\024\001\255\255\255\255\027\001\255\255\
\255\255\030\001\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\255\255\
\255\255\255\255\255\255\021\001\022\001\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\255\255\020\001\021\001\022\001\255\255\
\255\255\255\255\026\001\255\255\028\001\029\001\255\255\031\001\
\003\001\004\001\005\001\006\001\007\001\000\000\255\255\255\255\
\011\001\012\001\013\001\255\255\015\001\255\255\017\001\255\255\
\019\001\020\001\255\255\255\255\000\000\255\255\255\255\026\001\
\255\255\028\001\029\001\255\255\031\001\003\001\004\001\005\001\
\006\001\007\001\255\255\000\000\255\255\011\001\012\001\013\001\
\255\255\015\001\255\255\017\001\255\255\019\001\020\001\255\255\
\255\255\255\255\000\000\255\255\026\001\255\255\028\001\029\001\
\255\255\031\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\000\000\011\001\012\001\013\001\255\255\015\001\255\255\
\017\001\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\000\000\026\001\255\255\028\001\029\001\255\255\031\001\003\001\
\004\001\255\255\255\255\007\001\255\255\255\255\255\255\011\001\
\012\001\013\001\000\000\015\001\255\255\017\001\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\028\001\029\001\255\255\031\001\003\001\004\001\255\255\255\255\
\007\001\255\255\255\255\255\255\011\001\012\001\013\001\255\255\
\015\001\000\000\017\001\255\255\019\001\020\001\255\255\255\255\
\255\255\255\255\255\255\026\001\255\255\028\001\029\001\007\001\
\031\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\255\255\017\001\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\029\001\007\001\031\001\
\255\255\255\255\011\001\012\001\255\255\255\255\015\001\255\255\
\017\001\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\026\001\255\255\028\001\029\001\007\001\031\001\255\255\
\255\255\011\001\012\001\255\255\255\255\015\001\255\255\017\001\
\255\255\019\001\020\001\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\028\001\029\001\007\001\031\001\255\255\255\255\
\011\001\012\001\255\255\255\255\015\001\255\255\017\001\255\255\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\028\001\029\001\015\001\031\001\017\001\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\028\001\029\001\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\015\001\255\255\017\001\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\028\001\029\001\
\255\255\031\001\255\255\255\255\015\001\255\255\017\001\255\255\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\028\001\029\001\015\001\031\001\017\001\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\028\001\029\001\015\001\031\001\017\001\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\026\001\255\255\028\001\
\029\001\015\001\031\001\017\001\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\028\001\029\001\
\015\001\031\001\017\001\255\255\019\001\020\001\255\255\255\255\
\255\255\255\255\255\255\026\001\255\255\028\001\029\001\015\001\
\031\001\017\001\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\029\001\255\255\031\001\
\255\255\015\001\255\255\017\001\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\028\001\029\001\
\255\255\031\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\255\255\255\255\255\255\255\255\021\001\022\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\255\255\255\255\255\255\255\255\021\001\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\255\255\255\255\255\255\
\255\255\021\001\022\001\255\255\255\255\255\255\255\255\255\255\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\255\255\255\255\026\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\255\255\255\255\255\255\255\255\021\001\
\022\001\255\255\255\255\255\255\026\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\255\255\
\255\255\021\001\022\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\255\255\255\255\255\255\020\001\021\001\
\022\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\255\255\021\001\022\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\255\255\016\001\255\255\
\255\255\001\001\002\001\021\001\022\001\005\001\006\001\255\255\
\008\001\009\001\010\001\255\255\255\255\255\255\014\001\255\255\
\016\001\255\255\255\255\255\255\255\255\021\001\022\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  ASTERISK\000\
  SLASH\000\
  EQUAL\000\
  AND\000\
  OR\000\
  NOTEQ\000\
  LESS\000\
  GREATER\000\
  COLCOL\000\
  LPAREN\000\
  RPAREN\000\
  LBRA\000\
  RBRA\000\
  ARROW\000\
  VBAR\000\
  SEMICOL\000\
  TRUE\000\
  FALSE\000\
  FUN\000\
  LET\000\
  REC\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  MATCH\000\
  WITH\000\
  HEAD\000\
  TAIL\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 73 "parser.mly"
    ( _1 )
# 427 "parser.ml"
               : Syntax.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 78 "parser.mly"
        ( Cons(_1, Empty) )
# 434 "parser.ml"
               : 'list_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 79 "parser.mly"
                ( Cons(_1, Empty) )
# 441 "parser.ml"
               : 'list_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_inner) in
    Obj.repr(
# 80 "parser.mly"
                           ( Cons(_1, _3) )
# 449 "parser.ml"
               : 'list_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 85 "parser.mly"
    ( Var _1 )
# 456 "parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 88 "parser.mly"
    ( IntLit _1 )
# 463 "parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
    ( BoolLit true )
# 469 "parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
           ( BoolLit false )
# 475 "parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
              ( Empty )
# 481 "parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_inner) in
    Obj.repr(
# 98 "parser.mly"
                         ( _2 )
# 488 "parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 102 "parser.mly"
    ( _2 )
# 495 "parser.ml"
               : 'arg_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg_exp) in
    Obj.repr(
# 108 "parser.mly"
    ( _1 )
# 502 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arg_exp) in
    Obj.repr(
# 112 "parser.mly"
    ( App (_1, _2) )
# 510 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 116 "parser.mly"
    ( Minus (IntLit 0, _2) )
# 517 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 120 "parser.mly"
    ( Plus (_1, _3) )
# 525 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 124 "parser.mly"
    ( Minus (_1, _3) )
# 533 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 128 "parser.mly"
    ( Times (_1, _3) )
# 541 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 132 "parser.mly"
    ( Div (_1, _3) )
# 549 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 136 "parser.mly"
    ( Eq (_1, _3) )
# 557 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 140 "parser.mly"
    ( NotEq (_1, _3) )
# 565 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 144 "parser.mly"
    ( And (_1, _3) )
# 573 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 148 "parser.mly"
    ( Or (_1, _3) )
# 581 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 152 "parser.mly"
    ( Less (_1, _3) )
# 589 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 156 "parser.mly"
    ( Greater (_1, _3) )
# 597 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 160 "parser.mly"
    ( Cons (_1, _3) )
# 605 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arg_exp) in
    Obj.repr(
# 164 "parser.mly"
    ( Head _2 )
# 612 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arg_exp) in
    Obj.repr(
# 168 "parser.mly"
    ( Tail _2 )
# 619 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 172 "parser.mly"
    ( Fun (_2, _4) )
# 627 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 176 "parser.mly"
    ( Let (_2, _4, _6) )
# 636 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 180 "parser.mly"
    ( LetRec (_3, _4, _6, _8) )
# 646 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 184 "parser.mly"
    ( If (_2, _4, _6) )
# 655 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cases_rev) in
    Obj.repr(
# 188 "parser.mly"
    ( Match (_2, List.rev _4) )
# 663 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "parser.mly"
    ( 
      let message =
        Printf.sprintf 
          "parse error near characters %d-%d"
          (Parsing.symbol_start ())
	        (Parsing.symbol_end ())
	    in
	    failwith message
	  )
# 677 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 206 "parser.mly"
    ( [(_1, _3)] )
# 685 "parser.ml"
               : 'cases_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'cases_rev) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 209 "parser.mly"
    ( (_3, _5) :: _1 )
# 694 "parser.ml"
               : 'cases_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 215 "parser.mly"
    ( Var _1 )
# 701 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 218 "parser.mly"
    ( IntLit _1 )
# 708 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "parser.mly"
    ( BoolLit true )
# 714 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "parser.mly"
    ( BoolLit false )
# 720 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 227 "parser.mly"
    ( Empty )
# 726 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 230 "parser.mly"
    ( Cons (_1, _3) )
# 734 "parser.ml"
               : 'pattern))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.exp)
